{
  "name": "chrono-node",
  "description": "A natural language date parser in Javascript",
  "homepage": "http://github.com/berryboy/chrono",
  "repository": {
    "type": "git",
    "url": "https://github.com/berryboy/chrono.git"
  },
  "version": "0.1.8",
  "directories": {
    "improvers": "./improvers",
    "parsers": "./parsers",
    "test-nodeunit": "./test-nodeunit",
    "test-qunit": "./test-qunit"
  },
  "main": "./chrono",
  "devDependencies": {
    "qunitjs": "~1.12.0",
    "karma-script-launcher": "~0.1.0",
    "karma-chrome-launcher": "~0.1.0",
    "karma-firefox-launcher": "~0.1.0",
    "karma-html2js-preprocessor": "~0.1.0",
    "karma-jasmine": "~0.1.3",
    "karma-requirejs": "~0.1.0",
    "karma-coffee-preprocessor": "~0.1.0",
    "karma-phantomjs-launcher": "~0.1.0",
    "karma": "~0.10.4",
    "karma-qunit": "~0.1.1",
    "uglify-js": "~2.4.1"
  },
  "readme": "Chrono\n======\n\nA natural language date parser in Javascript. It is designed to extract date informations from any given text. \n\nChrono supports a number of date and time formats, including :\n\n* Today, Tomorrow, Yesterday, last Friday, etc\n* 10/13/2013\n* this Friday from 13:00 - 16.00\n* Saturday, 17 August 2013 - Monday, 19 August 2013\n* Sat Aug 17 2013 18:40:39 GMT+0900 (JST)\n\n### Node.js \n\n    npm install chrono-node\n\n### Browser\n\n    <script src=\"https://rawgithub.com/wanasit/chrono/master/chrono.min.js\"></script>\n\n## USAGE\n\nJust pass a string to function `chrono.parseDate` or `chrono.parse`. \n\n```javascript\n> var chrono = require('chrono-node')\n\n> chrono.parseDate('An appointment on Sep 12-13') \nThu Sep 12 2013 12:00:00 GMT+0900 (JST)\n    \n> chrono.parse('An appointment on Sep 12-13')    \n[ { start: \n     { year: 2013,\n       month: 8,\n       day: 12,\n       impliedComponents: [Object],\n       isCertain: [Function],\n       date: [Function] },\n    startDate: Thu Sep 12 2013 12:00:00 GMT+0900 (JST),\n    end: \n     { year: 2013,\n       month: 8,\n       day: 13,\n       impliedComponents: [Object],\n       isCertain: [Function],\n       date: [Function] },\n    endDate: Fri Sep 13 2013 12:00:00 GMT+0900 (JST),\n    referenceDate: Sat Aug 17 2013 17:54:57 GMT+0900 (JST),\n    index: 18,\n    text: 'Sep 12-13',\n    concordance: 'An appointment on Sep 12-13' } ]\n```\n\n### Reference Date\n\nToday's \"Friday\" is difference from last month's \"Friday\". \nThe meaning of mentioned dates are depended on when they were mentioned. \nChrono let you define the reference date using `chrono.parse(text,ref)` and `chrono.parseDate(text,ref)`.    \n\n```javascript\n\n> chrono.parseDate('Friday', new Date(2012,7,23)); \nFri Aug 24 2012 12:00:00 GMT+0700 (ICT)\n\n> chrono.parseDate('Friday', new Date(2012,7,1)); \nFri Aug 03 2012 12:00:00 GMT+0700 (ICT)\n```\n\n### Text \n\nChrono is designed to work with long text (notes, emails, articles, etc). \n`chrono.parse` will return an array of every date mentioned in the story.\n\n```javascript\n> var text = 'October 7, 2011, of which details were not revealed out of respect to Jobs\\'s family.[239] Apple announced on the same day that they had no plans for a public service, but were encouraging \"well-wishers\" to send their remembrance messages to an email address created to receive such messages.[240] Sunday, October 16, 2011'\n> chrono.parse(text)\n[{ start: \n    { year: 2011,\n      month: 9,\n      day: 7,\n      ....\n { start: \n    { year: 2011,\n      month: 9,\n      day: 16,\n      ....\n```\n\n### Parsing Result \n\nChrono provides very detailed parsing results as objects of class `chrono.ParseResult`.\n\n* `start (chrono.DateComponents)` : The parsing result as a [DateComponents](#date-components) object\n* `startDate (Date)` : The parsing result as a javascript Date object\n* `end (chrono.DateComponents)` `endDate (Date)` : Similar to `start` and `startDate` (Optional)\n* `index (int)`   : The location within the input text of this result  \n* `text (string)` : The mentioned words within the input text of this result \n* `concordance (string)` : The context of mentioned words within the input text (up to 30 characters)\n* `referenceDate (Date)` : The [reference date](#reference-date) of this result\n\n#### Date Components\n\n* `year`,`month`,`day`, `dayOfWeek`, `hour`, `minute`, `second` : The datected components\n* `impliedComponents (array)` : The components that are not explicitly mentioned \n* `date ( function )` : Return a javascript Date\n\n## Customize Chrono\n\n### Parser\n\nParser is a module for low-level parsing. Each parser is designed to handle a single specific date format.\nIn Chrono's parsing process, a number of parsers will be used togather to produce the results. \nYou should define new type of parsers for supporting new date formats or languages.\n\nChrono create parser objects by [factory method](http://javascript.info/tutorial/factory-constructor-pattern) pattern.\nTo add a new type of parser, declare a new factory function in `chrono.parsers`. \nWithin that function:\n\n* Create an object from `chrono.Parser()` \n* Override the object's `pattern` and `extract` methods \n* Return the object\n\n```javascript\nchrono.parsers.ChrismasParser = function(text, ref, opt) {\n  \n  // Create a chrono's base parser\n  var parser = chrono.Parser(text, ref, opt); \n  \n  // Extend the parser with our pattern\n  parser.pattern = function () { return /Christmas/i } // Provide search pattern\n  parser.extract = function(text, index) { \n    // Chrono will find all indexes of the text that match our pattern.\n    // We need to check and return the result \n    var mentioned_text = text.substr(index).match(/Christmas/i)[0];\n    return new chrono.ParseResult({\n      referenceDate : ref,\n      text : mentioned_text,\n      index: index,\n      start: {\n        day: 25, month: 11, // It's 25 December\n        year: ref.getFullYear() // But we don't sure about the 'year' \n        impliedComponents: ['year'] \n      }\n    });\n  }\n\n  return parser;\n}\n\n...\n\n// Lets chrono merge and refine our result (See. '2.30 AM')\n> chrono.parseDate(\"I'll arrive at 2.30AM on Christmas night\")\nWed Dec 25 2013 02:30:00 GMT+0900 (JST)\n\n```\n\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/berryboy/chrono/issues"
  },
  "_id": "chrono-node@0.1.8",
  "dist": {
    "shasum": "32900697bf91e2e37850143e0b1bfeb20247413f"
  },
  "_from": "chrono-node@",
  "_resolved": "https://registry.npmjs.org/chrono-node/-/chrono-node-0.1.8.tgz"
}
